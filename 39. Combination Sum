Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, res, new ArrayList<>(),target,0);
        return res;
    }
    
    public void dfs(int[] candidates, List<List<Integer>> res,List<Integer> tmp, int target, int idx){
        if (target == 0)
            res.add(new ArrayList<>(tmp));
        else if(target < 0)
            return;
        
        else{
            for (int i = idx; i < candidates.length; i++){
                tmp.add(candidates[i]);
                dfs(candidates, res, tmp, target - candidates[i],i);
                tmp.remove(tmp.size()-1);
            }
        }
    }
}
