Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0];
        int dp [] = new int[nums.length];
        dp[0] = nums [0];
        if (nums == null){
            return 0; 
        }
        for (int pos = 1;pos < nums.length;pos++){
           if  (dp[pos-1]> 0){
               dp[pos] = dp[pos-1] +nums[pos];
               sum = max(dp[pos],sum);
           }
            else{
                dp [pos] = nums[pos];
                sum = max(dp[pos],sum);
            }
        }
        return sum;
    }
    public int max(int a, int b){
        if (a>b){
            return a;
        }
        return b;
    }
}
