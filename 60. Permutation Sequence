The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"


public class Solution {
    public String getPermutation(int n, int k) {
        if (k <= 0 || n <= 0) return "";
        int j = 1;
        List<Integer> nums = new LinkedList<>();
        for (int i = 1;i<=n;i++){
            nums.add(i); 
        }
        k--; // 这一步使得 1-based 挪到 0-based
        StringBuilder sb = new StringBuilder();
        while (n>0){
            int q = jie (n-1);
            int p = k/q ;
            k %= q;
            sb.append(nums.remove(p));
            n--;
        }
        return sb.toString();
}
    public int jie(int n){
        int m = 1;
        for (int i = 1; i <=n;i++){
            m *= i;
        }
        return m;
    }
}
