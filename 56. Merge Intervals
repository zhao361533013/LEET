/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        LinkedList <Interval> a = new LinkedList<Interval>(); 
        if (intervals == null|| intervals.size() == 0){
            return a;
        }
        Collections.sort(intervals,new Comparator<Interval>(){
            public int compare(Interval o1, Interval o2){
                return o1.start-o2.start;
            }
        });
        a.add(intervals.get(0));
        for (int i = 1; i < intervals.size(); i++ ){
            if (a.get(a.size()-1).end >= intervals.get(i).start){
                a.get(a.size()-1).end = Math.max(a.get(a.size()-1).end,intervals.get(i).end);
            }else{
                a.add(intervals.get(i));
            }
        }
        return a;
    }
}
