450. Delete Node in a BST

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null ){
            return null;
        }
        if (root.val < key){
            root.right = deleteNode (root.right, key);
        }
        else if (root.val > key){
            root.left = deleteNode (root.left,key);
        }
        else {
            if (root.right == null){
                root = root.left;
            }
            else if (root.left == null){
                root = root.right;
            }
            else {
                int min = L (root.right);
                root.val = min;
                root.right = deleteNode(root.right,min);
            }
            
        }
        return root;
    }
    private int L (TreeNode root){
        while (root.left != null){
            root = root.left;
        }
        return root.val;
    }
}

// 这个方法是用右子树中最小的节点来代替待删除的节点然后递归删除右子树中这个节点。 利用了二叉搜索树中的数值的定义来做。
