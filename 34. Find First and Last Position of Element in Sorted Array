Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int s = nums.length;
        int []as = {-1,-1};
        if (s == 0){
            return as;
        }
        int a = last (nums,target,0,s-1);
        int b = start(nums,target,0,s-1);
        int [] ld ={b,a};
        return ld;
    }
    private int last(int []nums, int target, int st, int la){
        int mid = st + (la-st)/2;
        if (target == nums[mid]){
            if (mid == la){
            return mid;
            }
            if (mid+1 <= la && nums[mid+1] != target){
                return mid;
            }
        }
        if (target!= nums[st] && (st == la)){
            return -1;
        }
        if (target < nums[mid]&& mid > 0){
            return last (nums,target,0,mid-1);
        }
        if (target >= nums[mid]&& mid <la){
            return last (nums,target,mid+1,la);
        }
        return -1;
    }
      private int start(int []nums, int target, int st, int la){
        int mid = st + (la-st)/2;
        
        if (target == nums[mid]){
            if (mid == st){
            return mid;
            }
            if (mid -1 >= st && nums[mid-1] != target){
                return mid;
            }
        }
       if (target!= nums[st] && (st == la) ){
            return -1;
        }
        if (target <= nums[mid]&& mid > 0){
            return start (nums,target,0,mid-1);
        }
        if (target > nums[mid]&& mid < la  ){
            return start (nums,target,mid+1,la);
        }
          return -1;
    }
}
