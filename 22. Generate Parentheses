Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

class Solution {
    public List<String> generateParenthesis(int n) {
        List <String> res = new LinkedList<String>();
        ld("",res,n,0,0);
        return res;
    }
    
    public void ld(String curr, List<String>res, int n, int left, int right){
        if(right == n){
            res.add(curr);
            return;
        }
        if (left < n){
            ld(curr +"(",res,n,left+1,right);
        }
        if (right < left){
            ld(curr +")",res,n,left,right+1);
        }
    }
}
